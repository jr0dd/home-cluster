{
  "enabled": true,
  "timezone": "America/New_York",
  "semanticCommits": "enabled",
  "dependencyDashboard": true,
  "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
  "commitBody": "Signed-off-by: j_r0dd <jr0dd@users.noreply.github.com>",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  "commitMessageTopic": "{{depName}}",
  "commitMessageExtra": "to {{newVersion}}",
  "commitMessageSuffix": "",
  "hostRules": [
    {
      "matchHost": "ghcr.io/jr0dd/wyoa-bot",
      "username": "jr0dd",
      "encrypted": {
        "password": "wcFMA/xDdHCJBTolAQ//Zk2OmOhHoSwpOlmIzAssgF2qY4HPk0LpbE83SzeDzDYffFo0qUQCmno3V2Q9gK5J/k/r4utKOHpw/Wki/xUXYau6A6QeR6dwz+uCftdyG+jdiP7Aq2Ml5ZqQx1mjKLilL9M+KV2i7CLyUiYc8dCy4F/bwww1/DfzgfkUielxK3ytQxfD6d2G27/8ysiurt3XXGKJPxTfK2K67iODH14AapvA13tfR1ubhf4LH6N0uGPHmyg8MQb9IIaDkW2YXuUvbVRAFoD4Wsmv0Flka650fIercXCx9cnwXovn1DDguAP3lPhe8l4O9Lq8NmSO+dgMGZ9BCHmkhc3Ubw91G0X7YjgmOib/+vNAXeNibJlHmj324fwsLWMCC5NbI4JssXuXp1xRpCgGI79lNwClmhRHWGU5TK0+VxLUiiFzrARKK07W1k7gQSGaGJs4IzaCLl4RfbKb1csQPqBOdzjTi/m5D8PuggoiT3zF5MOXlTyJ//eooeH7yd3E6Eyb7pm2Nlu/a02XUCb71AH8DuXCSpQ2s511r4NVBQf2K8j3HXiSYZT3fd6J/mqB/V7HbHFv6P1TxOcL185lgVNwgx1sD8Svl+EfmshL9A/lEILK841yPUsVJEFS0dmH0ZxvhasI+4oRoc+hX9aQc5SgBs7X9CoMjeSwLKtrbD9P4a9eAoWAv67SgAEiXxna68MRMS7YVee3WVDrwPsMndmWB89NSaXb+gATnuwRl3vMN2R/pqczU6nZqr6aGv8KVRIJLnTdouwQDLm5Or+qNGiLFkT0wWuTqclztAIYvfjXdqdgwNkiKvztP2VmvC9Dj3jP47fQR829jJOtcHv/2fmC7Ax+zil41I4f"
      }
    }
  ],
  // set up Renovate Managers
  "helmv3": {
    "fileMatch": ["charts/.+/Chart\\.yaml$"]
  },
  "helm-values": {
    "fileMatch": ["cluster/.+/helm-release\\.yaml$"]
  },
  "kubernetes": {
    "fileMatch": ["cluster/.+\\.yaml$"],
    "ignorePaths": ["cluster/base/"]
  },
  "regexManagers": [
    // regexManager to read and process HelmRelease files
    {
      "fileMatch": [
        "cluster/.+\\.yaml$"
      ],
      "matchStrings": [
        // helm releases
        "registryUrl=(?<registryUrl>.*?)\n *chart: (?<depName>.*?)\n *version: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process cert-manager CRD's
    {
      "fileMatch": [
        "cluster/crds/cert-manager/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n.*\\/(?<currentValue>.*?)\\/"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Kube Prometheus Stack Velero and OpenEBS CRD's
    {
      "fileMatch": [
        "cluster/crds/kube-prometheus-stack/.+\\.yaml$",
        "cluster/crds/velero/.+\\.yaml$",
        "cluster/crds/openebs-zfs-localpv/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?)\n *tag: (?<depName>[a-zA-Z-]+)-(?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Traefik CRD's
    {
      "fileMatch": [
        "cluster/crds/traefik/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: v(?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Rook-Ceph CRD's
    {
      "fileMatch": [
        "cluster/crds/rook-ceph/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process External DNS and MinIO Operator CRD's
    {
      "fileMatch": [
        "cluster/crds/external-dns/.+\\.yaml$",
        "cluster/crds/minio-operator/.+\\.yaml$"
      ],
      "matchStrings": [
        "datasource=(?<datasource>.*?)\n *url: https:\/\/github\\.com\/(?<depName>.*?)\\.git\n *ref:\n *tag: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "github-releases"
    }
  ],
  "packageRules": [
    // setup datasources
    {
      "matchDatasources": ["helm"],
      "semanticCommitScope": "charts",
      "separateMinorPatch": true,
      "ignoreDeprecated": true
    },
    {
      "matchDatasources": ["docker"],
      "enabled": true,
      "matchUpdateTypes": ["major", "minor", "patch"]
    },
    {
      "matchDatasources": ["docker"],
      "semanticCommitScope": "images",
      "separateMinorPatch": true
    },
    // add labels according to package and update types
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(images)!: ",
      "labels": ["renovate/image", "dep/major"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "labels": ["renovate/image", "dep/minor"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "labels": ["renovate/image", "dep/patch"]
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(charts)!: ",
      "labels": ["renovate/helm", "dep/major"]
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "labels": ["renovate/helm", "dep/minor"]
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "labels": ["renovate/helm", "dep/patch"]
    },
    // custom version schemes
    {
      "matchDatasources": ["docker"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$",
      "matchPackageNames": ["blakeblackshear/frigate"]
    },
    {
      "matchDatasources": ["docker"],
      "versioning": "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z(-(?<compatibility>.*))?$",
      "matchPackageNames": ["quay.io/minio/minio"]
    },
    // pin package versions
    {
      "matchDatasources": ["docker"],
      "allowedVersions": "<13",
      "matchPackageNames": [
        "postgres",
        "prodrigestivill/postgres-backup-local"
      ]
    },
    {
      "matchDatasources": ["docker"],
      "allowedVersions": "<2",
      "matchPackageNames": ["influxdb"]
    },
    // version strategies
    {
      "matchDatasources": ["docker"],
      "versioning": "loose",
      "matchPackageNames": [
        "ghcr.io/k8s-at-home/plex",
        "ghcr.io/k8s-at-home/qbittorrent"
      ]
    },
    // enable auto-merge
    {
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "requiredStatusChecks": null,
      "matchUpdateTypes": ["minor", "patch"],
      "matchPackageNames": [
        "ghcr.io/k8s-at-home/jackett",
        "ghcr.io/k8s-at-home/prowlarr",
        "ghcr.io/jr0dd/wyoa-bot",
        "ghcr.io/jr0dd/discord-stock-ticker"
     ]
    },
    // group packages
    {
      "matchDatasources": ["helm", "docker"],
      "matchPackagePatterns": ["^rook.ceph"],
      "groupName": "rook-ceph-suite",
      "additionalBranchPrefix": "",
      "separateMinorPatch": true
    },
    {
      "matchDatasources": ["github-tags", "docker"],
      "matchPackagePatterns": ["rancher/system-upgrade-controller"],
      "groupName": "system-upgrade-controller-suite",
      "additionalBranchPrefix": "",
      "separateMinorPatch": true
    }
  ]
}
