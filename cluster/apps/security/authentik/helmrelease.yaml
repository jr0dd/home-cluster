---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: 2.0.0
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  values:
    replicas: 1
    worker:
      replicas: 1
    image:
      repository: ghcr.io/goauthentik/server
      tag: 2021.7.2
    geoip:
      enabled: false
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918-ips@kubernetescrd
        cert-manager.io/cluster-issuer: letsencrypt-production
      hosts:
      - host: "id.${SECRET_DOMAIN}"
        paths:
      - path: /
        pathType: Prefix
      tls:
      - secretName: authentik-tls
        hosts:
        - "id.${SECRET_DOMAIN}"
    authentik:
      email:
        host: "${SECRET_SMTP}"
        port: 587
        use_tls: true
        username: "${SECRET_EMAIL}"
        password: "${SECRET_AUTHENTIK_EMAIL_PASSWORD}"
        from: "${SECRET_EMAIL}"
      secret_key: "${SECRET_AUTHENTIK_SECRET_KEY}"
      log_level: debug
      outposts:
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      postgresql:
        host: authentik-postgresql
        name: authentik
        user: authentik
        password: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
      redis:
        host: authentik-redis-master
        password: "${SECRET_AUTHENTIK_REDIS_PASSWORD}"
    postgresql:
      enabled: true
      persistence:
        enabled: true
        existingClaim: authentik
        skipuninstall: true
      postgresqlUsername: authentik
      postgresqlDatabase: authentik
      postgresqlPassword: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"    
    redis:
      enabled: true
      auth:
        enabled: true
        password: "${SECRET_AUTHENTIK_REDIS_PASSWORD}"
    # prometheus:
    #   serviceMonitor:
    #     create: true
    #     secret:
    #       name: "authentik-prometheus"
    #       usernameKey: monitor
    #       passwordKey: "${SECRET_AUTHENTIK_SECRET_KEY}"
    #   rules:
    #     create: true
