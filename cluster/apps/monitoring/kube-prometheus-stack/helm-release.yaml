---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 35.5.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    fullnameOverride: prometheus
    nameOverride: prometheus
    alertmanager:
      enabled: true
      logLevel: error
      config:
        global:
          resolve_timeout: 5m
          smtp_from: "${MAILGUN_EMAIL}"
          smtp_smarthost: smtp.mailgun.org:587
          smtp_auth_username: "${MAILGUN_USER}"
          smtp_auth_password: "${MAILGUN_PASSWORD}"
        receivers:
          - name: "null"
          - name: "email"
            email_configs:
              - to: "${SECRET_EMAIL}"
                send_resolved: false
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: email
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "email"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - &host "alertmanager.${SECRET_DOMAIN}"
        paths:
          - /
        pathType: Prefix
        tls:
          - secretName: alertmanager-tls
            hosts:
              - *host
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: openebs-zfspv-ssd
              resources:
                requests:
                  storage: 1Gi
    prometheus:
      enabled: true
      logLevel: error
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hosts:
          - &host "prometheus.${SECRET_DOMAIN}"
        paths:
          - /
        pathType: Prefix
        tls:
          - secretName: prometheus-tls
            hosts:
              - *host
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
        relabelings:
          - action: replace
            replacement: "thanos-sidecar"
            sourceLabels:
              - __job__
            targetLabel: job
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes:
                - ReadWriteOnce
              storageClassName: openebs-zfspv-ssd
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.26.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        # additionalScrapeConfigs:
        #   - job_name: "mikrotik-coredns"
        #     honor_timestamps: true
        #     static_configs:
        #       - targets:
        #           - ${GATEWAY_IP}:9153
    prometheusOperator:
      enabled: true
      prometheusConfigReloader:
        resources: {}
      admissionWebhooks:
        certManager:
          enabled: true
    coreDns:
      enabled: true
    kubeApiServer:
      enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      extraArgs:
        - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
        - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)'
        - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$'
      extraHostVolumeMounts:
        - name: textfiles
          hostPath: /var/lib/node_exporter/textfile_collector
          mountPath: /var/lib/node_exporter/textfile_collector
          readOnly: false
          mountPropagation: HostToContainer
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.10.0.10
      service:
        enabled: true
        port: 2381
    kubeControllerManager:
      enabled: false
    kubeDns:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    grafana:
      enabled: false
      forceDeployDashboards: true
