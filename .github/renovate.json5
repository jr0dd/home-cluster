{
  "enabled": true,
  "timezone": "America/New_York",
  "semanticCommits": "enabled",
  "dependencyDashboard": true,
  "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
  "commitBody": "Signed-off-by: j_r0dd <jr0dd@users.noreply.github.com>",
  "suppressNotifications": ["prIgnoreNotification"],
  "rebaseWhen": "conflicted",
  "commitMessageTopic": "{{depName}}",
  "commitMessageExtra": "to {{newVersion}}",
  "commitMessageSuffix": "",
  // "hostRules": [
  //   {
  //     "matchHost": "https://ghcr.io/jr0dd/wyoa-bot",
  //     "username": "jr0dd",
  //     "encrypted": {
  //       "token": "wcFMA/xDdHCJBTolAQ//VINa9DwX+D0/Se6AhfSZe0D2ErRsfDm63GXLdVkYVJlrcxak88EecJiH4/B2dk004SrSK0crNu4wa5MPw5DkcXhEfSDFGKVY79l95YHangqV26I8vBZQwNBTNcgx43w7oa+HeT2BG38PN9tJBDPukvNuSWnLQCZcbwa9S7ui4qgJ1PW/RFGB1tT6UcXO/yQAuiVmzGOJZOv0+dwd9W9RGDR2OKpmiWCS6H+4nRmMZfphPaiFmViBG1NTjdCahxbCIZ9p/mXbFUDf9bFE3kmzQ3CDTXDloFhl2V9KoexRexdvKiRjK2OhBE5Q+A37jrwf5k+cq9ZUcT7f1bcinMCYc0JzmUkVDpr2aKfsds6Ds18vImT6473zHD4e1SZkzhycIY+LV72i6AqjPe0TSi/ud/HO/9EEVqgY8DKDBiAd9C0lJhhvs0LLzgrwmLR+Rx1QqTs5ln9SzIeFFaI1xusfRX4sbDc805AQ/NOzG38RmQJuGXN8VuK4lXFkXuMdkEzx17axbELoCz8IIRfdc+ntNzhWsDzXv3w1/6JW6Fci2K84SctkrNK9xQ3ouscQWh760+yQjdOTFaUP4sBTZpJ7XuZJbRCSbHbv5jXLL6APpVolt7dagIJH64ZaXGObiIuKY9sQ0Dk5IsLfAbOt0xJAfmHB25HdDzPUT8CA+ev9ZTPSmAHLO5hzqXcEhkZDLFLpM/jNqcKIXmKElxYf0drKXckN7XM3UOfsWk4BLHxFVJF6lBtFoOQOhpgkHHZQ7MddRmwdfh4i1OTmfOqLKPigCp0nxjWpeDYW6jfqpyHBQHzPG4VIA5Vcd2HcBG/J5ExuZmjIj2GuaGDq7Ov0ElBJuozylIPPgeFjbaqrg63cK9atAqtJxYI+UGDw"
  //     }
  //   }
  // ],
  // set up Renovate Managers
  "helmv3": {
    "fileMatch": ["charts/.+/Chart\\.yaml$"]
  },
  "helm-values": {
    "fileMatch": ["cluster/.+/helm-release\\.yaml$"]
  },
  "kubernetes": {
    "fileMatch": ["cluster/.+\\.yaml$"],
    "ignorePaths": ["cluster/base/"]
  },
  "regexManagers": [
    // regexManager to read and process HelmRelease files
    {
      "fileMatch": [
        "cluster/.+\\.yaml$"
      ],
      "matchStrings": [
        // helm releases
        "registryUrl=(?<registryUrl>.*?)\n *chart: (?<depName>.*?)\n *version: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process cert-manager CRD's
    {
      "fileMatch": [
        "cluster/crds/cert-manager/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n.*\\/(?<currentValue>.*?)\\/"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Kube Prometheus Stack Velero and OpenEBS CRD's
    {
      "fileMatch": [
        "cluster/crds/kube-prometheus-stack/.+\\.yaml$",
        "cluster/crds/velero/.+\\.yaml$",
        "cluster/crds/openebs-zfs-localpv/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?)\n *tag: (?<depName>[a-zA-Z-]+)-(?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Traefik CRD's
    {
      "fileMatch": [
        "cluster/crds/traefik/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: v(?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process Rook-Ceph CRD's
    {
      "fileMatch": [
        "cluster/crds/rook-ceph/.+\\.yaml$"
      ],
      "matchStrings": [
        "registryUrl=(?<registryUrl>.*?) chart=(?<depName>.*?)\n *tag: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "helm"
    },
    // regexManager to read and process External DNS and MinIO Operator CRD's
    {
      "fileMatch": [
        "cluster/crds/external-dns/.+\\.yaml$",
        "cluster/crds/minio-operator/.+\\.yaml$"
      ],
      "matchStrings": [
        "datasource=(?<datasource>.*?)\n *url: https:\/\/github\\.com\/(?<depName>.*?)\\.git\n *ref:\n *tag: (?<currentValue>.*)\n"
      ],
      "datasourceTemplate": "github-releases"
    }
  ],
  "packageRules": [
    // setup datasources
    {
      "matchDatasources": ["helm"],
      "semanticCommitScope": "charts",
      "separateMinorPatch": true,
      "ignoreDeprecated": true
    },
    {
      "matchDatasources": ["docker"],
      "enabled": true,
      "matchUpdateTypes": ["major", "minor", "patch"]
    },
    {
      "matchDatasources": ["docker"],
      "semanticCommitScope": "images",
      "separateMinorPatch": true
    },
    // add labels according to package and update types
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(images)!: ",
      "labels": ["renovate/image", "dep/major"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "labels": ["renovate/image", "dep/minor"]
    },
    {
      "matchDatasources": ["docker"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "labels": ["renovate/image", "dep/patch"]
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["major"],
      "commitMessagePrefix": "feat(charts)!: ",
      "labels": ["renovate/helm", "dep/major"]
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["minor"],
      "semanticCommitType": "feat",
      "labels": ["renovate/helm", "dep/minor"]
    },
    {
      "matchDatasources": ["helm"],
      "matchUpdateTypes": ["patch"],
      "semanticCommitType": "fix",
      "labels": ["renovate/helm", "dep/patch"]
    },
    // custom version schemes
    {
      "matchDatasources": ["docker"],
      "versioning": "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-(?<compatibility>.*)$",
      "matchPackageNames": ["blakeblackshear/frigate"]
    },
    {
      "matchDatasources": ["docker"],
      "versioning": "regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T.*Z(-(?<compatibility>.*))?$",
      "matchPackageNames": ["quay.io/minio/minio"]
    },
    // pin package versions
    {
      "matchDatasources": ["docker"],
      "allowedVersions": "<13",
      "matchPackageNames": [
        "postgres",
        "prodrigestivill/postgres-backup-local"
      ]
    },
    {
      "matchDatasources": ["docker"],
      "allowedVersions": "<2",
      "matchPackageNames": ["influxdb"]
    },
    // version strategies
    {
      "matchDatasources": ["docker"],
      "versioning": "loose",
      "matchPackageNames": [
        "ghcr.io/k8s-at-home/plex",
        "ghcr.io/k8s-at-home/qbittorrent"
      ]
    },
    // enable auto-merge
    {
      "matchDatasources": ["docker"],
      "automerge": true,
      "automergeType": "branch",
      "requiredStatusChecks": null,
      "matchUpdateTypes": ["minor", "patch"],
      "matchPackageNames": [
        "ghcr.io/k8s-at-home/jackett",
        "ghcr.io/k8s-at-home/prowlarr",
        "ghcr.io/jr0dd/wyoa-bot",
        "ghcr.io/jr0dd/discord-stock-ticker"
     ]
    },
    // group packages
    {
      "matchDatasources": ["helm", "docker"],
      "matchPackagePatterns": ["^rook.ceph"],
      "groupName": "rook-ceph-suite",
      "additionalBranchPrefix": "",
      "separateMinorPatch": true
    },
    {
      "matchDatasources": ["github-tags", "docker"],
      "matchPackagePatterns": ["rancher/system-upgrade-controller"],
      "groupName": "system-upgrade-controller-suite",
      "additionalBranchPrefix": "",
      "separateMinorPatch": true
    }
  ]
}
