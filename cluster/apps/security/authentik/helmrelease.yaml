---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: security
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: 2.1.0
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  values:
    replicas: 1
    worker:
      replicas: 1
    image:
      repository: beryju.org/authentik/server
      tag: gh-next
      pullPolicy: Always
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: networking-rfc1918-ips@kubernetescrd
        cert-manager.io/cluster-issuer: letsencrypt-production
      hosts:
        - host: "id.${SECRET_DOMAIN}"
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: authentik-tls
          hosts:
            - "id.${SECRET_DOMAIN}"
    authentik:
      email:
        host: "${SECRET_SMTP}"
        port: 587
        use_tls: true
        username: "${SECRET_EMAIL}"
        password: "${AUTHENTIK_EMAIL_PASSWORD}"
        from: "${SECRET_EMAIL}"
      secret_key: "${AUTHENTIK_SECRET_KEY}"
      log_level: debug
      outposts:
        docker_image_base: beryju.org/authentik/outpost-%(type)s:gh-next
      error_reporting:
        enabled: true
      postgresql:
        host: authentik-postgresql
        name: authentik
        user: authentik
        password: "${AUTHENTIK_POSTGRES_PASSWORD}"
        s3_backup:
          access_key: "${MINIO_TENANT_ACCESS_KEY}"
          secret_key: "${MINIO_TENANT_SECRET_KEY}"
          bucket: authentik
          host: https://minio.minio:443
      redis:
        host: authentik-redis-master
        password: "${AUTHENTIK_REDIS_PASSWORD}"
    prometheus:
      serviceMonitor:
        create: false
        interval: 30s
        scrapeTimeout: 3s
        secret:
          name: "authentik-sm"
          usernameKey: monitor
          passwordKey: "${AUTHENTIK_SECRET_KEY}"
      rules:
        create: true
    postgresql:
      enabled: true
      persistence:
        enabled: true
        existingClaim: authentik
      postgresqlUsername: authentik
      postgresqlDatabase: authentik
      postgresqlPassword: "${AUTHENTIK_POSTGRES_PASSWORD}"
    redis:
      enabled: true
      auth:
        enabled: true
        password: "${AUTHENTIK_REDIS_PASSWORD}"
